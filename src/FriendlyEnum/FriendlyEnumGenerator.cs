using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FriendlyEnum;

[Generator]
public class FriendlyEnumGenerator : ISourceGenerator
{
    private const string FriendlyEnumAttributeName = "FriendlyEnumAttribute";
    private const string FriendlyNameAttributeName = "FriendlyNameAttribute";
    private const string ExtensionClassName = "FriendlyEnumExtensions";
    
    private const string GeneratorAttributeSourceCode = $@"// <auto-generated/>
    [System.AttributeUsage(System.AttributeTargets.Enum, AllowMultiple = false)]
    public class {FriendlyEnumAttributeName} : System.Attribute
    {{
    }}";

    private const string FriendlyNameAttributeSourceCode = $@"// <auto-generated/>
    [System.AttributeUsage(System.AttributeTargets.Field, AllowMultiple = false)]
    public class {FriendlyNameAttributeName} : System.Attribute
    {{
        public string Value {{ get; set; }}
    }}";
    
    
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new FriendlyEnumSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        RegisterAttributes(context);
        
        CreateFriendlyEnumExtensionClass(context);
    }

    private void CreateFriendlyEnumExtensionClass(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not FriendlyEnumSyntaxReceiver receiver || receiver.Enums.Count == 0) 
            return;

        var source = SourceCodeBuilder
            .BuildExtensionClassSourceCode(ExtensionClassName, receiver.Enums)
            .ReformatAndCleanup();
        
        context.AddSource($"{ExtensionClassName}.g.cs", source);
    }
    
    
    private void RegisterAttributes(GeneratorExecutionContext context)
    {
        context.AddSource($"{FriendlyEnumAttributeName}.g.cs", GeneratorAttributeSourceCode);
        context.AddSource($"{FriendlyNameAttributeName}.g.cs", FriendlyNameAttributeSourceCode);
    }
}